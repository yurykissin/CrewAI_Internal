###
### Task configuration YAML
###

initiate_market_research:
  agent: project_manager
  description: >
    Kick off the project by initiating market research to better understand the unmet needs of micro and small businesses in the advertising space.
    Use the Market Research Analyst to delegate this work. Clearly state what research is needed and why it's critical before defining the MVP.
  expected_output: >
    A summary of what the Market Research Analyst was asked to do, and confirmation that the task was delegated.

# Define MVP Strategy based on Deep Research which ran previusly in ChatGPT and stored in LangSmith  This task is for Product Manager
# Input:  LangSmith dataset with Deep Research
# Output: MVP Strategy
define_mvp_strategy:
  agent: product_manager
  description: >
    Use the SMB market research insights to define an initial MVP strategy for the AI-native ad automation platform.
    Identify the top 3 features to prioritize, based on unmet needs of micro and small businesses. 
    Justify each feature based on evidence from the dataset. Include rough effort vs. impact estimate.
  expected_output: >
    1. MVP Scope
    2. Key Features
    3. Target User Segment
    4. Roles Needed
    5. Known Risks

# Define Execution plan based on MVP plan created previsouly by the Product Manager
# Input: MVP Strategy
create_execution_plan:
  agent: project_manager
  description: >
    Take the MVP plan created by the Product Manager Agent and turn it into a coordinated execution plan.
    Start by checking if a technical architecture plan exists. If not, request it from the Technical Architect Agent.
    Once received, use that architecture context to guide your task breakdown and agent assignments.
    For market research tasks use 'Market Research Analyst'. Use only agents in the configuration.
    Break the MVP into 2–4 epics. Under each epic, define features and break them down into tasks.

    For each task, include:
    - A short title
    - A 1–2 sentence description of the task
    - Assigned agent role
    - Estimated duration
    - Dependencies
    - A clear, standalone execution prompt for the assigned agent

    Inject technical architecture constraints into relevant task prompts (e.g., stack, API, data model).

  expected_output: >
    A structured plan of epics > features > tasks, each assigned to a specific agent.
    For each task:
    - Include agent role, description, estimated time, dependencies
    - Include execution prompt text for the agent
    Also include:
    - Any open risks or blockers
    - Recommended execution order

define_architecture_plan:
  agent: technical_architect
  description: >
    Based on the MVP plan provided by the Product Manager Agent, define the technical architecture for the platform.

    Your plan should include:
    - Core system architecture (frontend/backend/data/services)
    - Stack recommendations for frontend and backend
    - Key data models (e.g., User Profile, Campaign, Budget, Performance Metrics)
    - API design notes or integration needs
    - Security and performance considerations
    - Any assumptions or open questions

    This plan will be used by the UX, Backend, and Frontend engineers to guide all implementation work.

  expected_output: >
    A full technical architecture brief including:
    1. Architecture Overview
    2. Frontend Stack Recommendation
    3. Backend Stack Recommendation
    4. Key Data Models
    5. Key APIs / Integration Points
    6. Security & Performance Considerations
    7. Assumptions / Open Questions

design_user_interface:
  agent: ux_designer
  description: >
    Based on the execution plan from the Project Manager Agent and the techincal architecture from the Technical Architect design the user interface and interaction flow for one specific feature of the MVP.

    The prompt will specify:
    - The feature and user goal
    - The frontend stack (from Technical Architect Agent)
    - Interaction expectations

    Your job is to define:
    - The user interaction flow
    - The layout of the screen (in words)
    - UX design considerations
    - Open questions or assumptions you made

  expected_output: >
    1. Task Summary
    2. User Flow Description
    3. Proposed UI Layout (using structured markdown or text-based wireframe)
    4. UX Considerations
    5. Assumptions / Questions (if any)

market_research_analysis:
  agent: market_researcher
  description: >
    Conduct or analyze market research about SMB needs and pain points related to ad automation platforms.
    If no research is provided, generate a high-level analysis using your knowledge.
    If research is available, extract and summarize key insights.
  expected_output: >
    1. Key Market Trends and Pain Points
    2. Most Commonly Requested Features
    3. Unmet Needs & Gaps in the Market
    4. Summary for Product Planning
    End your response with:
    "MVP research is ready for Product Manager Agent."

spec_user_profile_ui:
  agent: frontend_dev
  description: >
    Describe the React UI implementation plan for the user profile screen.
    Use the UX layout provided and follow the frontend stack from the Technical Architect Agent.
    Include key components, state management, styling plan, and API integration points.
  expected_output: >
    - Component breakdown and naming
    - State and data handling strategy
    - API methods to be called
    - Use of styling libraries or patterns (e.g., Tailwind)
    - Assumptions or questions

code_user_profile_ui:
  agent: frontend_dev
  description: >
    Generate the React code for the user profile screen based on the previously defined implementation spec.
    Follow the UX design and the stack defined in the architecture (e.g., React + Tailwind).
  expected_output: >
    - Full React component code (JSX)
    - Any necessary imports (e.g., useState, axios/fetch)
    - Integration with API (GET/POST for user data)
    - Tailwind-based layout if applicable

spec_user_profile_api:
  agent: backend_dev
  description: >
    Define the backend API implementation plan for handling user profile creation and updates.
    Follow the backend stack and data model guidance provided by the Technical Architect Agent.
  expected_output: >
    - API route paths and HTTP methods
    - Request/response data schema
    - Input validation logic and error handling
    - Auth or service dependencies
    - Any assumptions or open questions

code_user_profile_api:
  agent: backend_dev
  description: >
    Generate the backend code for the user profile API as defined in the implementation spec.
    Follow the architectural guidance (e.g., FastAPI, Express) and implement proper request/response handling.
  expected_output: >
    - Full code for route definition and handler(s)
    - Validation logic and error responses
    - Example input/output payloads
    - DB or service integration stub

define_cloud_infrastructure:
  agent: cloud_architect
  description: >
    Translate the technical architecture into a deployable infrastructure layout for the MVP.
    Define how and where each service will run, what infrastructure components are needed, and how they connect.
  expected_output: >
    - Infrastructure diagram or layout description
    - Compute and hosting model for each service (e.g., static site, API, DB)
    - Networking design (e.g., subnets, ingress, DNS, SSL)
    - Key environment/grouping recommendations (e.g., frontend vs backend)
    - Assumptions or decisions regarding cloud vs local deployment
    - Security/access design (firewalls, isolation, authentication)

implement_local_devops_stack:
  agent: devops_engineer
  description: >
    Implement a local devops setup based on the infrastructure layout and architecture.
    The stack should deploy all services into a local Kubernetes environment using standard tools.
  expected_output: >
    - Chosen toolchain (e.g., Helm, Kustomize, Skaffold, Docker Compose)
    - Description of CI/CD automation (e.g., GitHub Actions, local build scripts)
    - Secrets/config management approach
    - Folder structure recommendations for infra-as-code
    - Sample YAML or Helm snippet if appropriate
    - Any known limitations or dev-time caveats

define_data_strategy_and_metrics:
  agent: data_analyst
  description: >
    Define how product and user activity data should be captured, stored, and used for analysis.
    Propose a model that enables tracking of business KPIs, feature usage, and marketing performance.
  expected_output: >
    - Key metrics (e.g., user activation rate, campaign ROI, click-through rate)
    - Recommended event structure or schema for tracking
    - Dimensions and tables needed (e.g., user, session, campaign, ad creative)
    - Data freshness or processing model (real-time, batch, daily aggregation)
    - Assumptions about data sources (frontend events, backend logs, 3rd-party APIs)
    - Analytics layers (dashboards, data marts) if applicable

define_database_schema:
  agent: dba
  description: >
    Based on the MVP features and the data strategy, design a relational (or hybrid) database schema to support core product needs and analytical queries.
  expected_output: >
    - Entity definitions and relationships (e.g., user, campaign, ad, performance metric)
    - Indexing strategy (e.g., for filter/search/sort queries)
    - Constraints, foreign keys, data types, and normalization approach
    - Suggestions for high-volume or time-series handling (e.g., partitioning, TTL)
    - Integration notes (e.g., access via API, ORM schema support)

integrate_services_stack:
  agent: integration_engineer
  description: >
    Connect the frontend, backend, and database using the existing infrastructure and devops stack.
    Resolve any integration issues and prepare the system for exposure.
  expected_output: >
    - Connectivity map (how frontend calls backend, how backend connects to DB)
    - Working environment with valid data flow
    - Any errors found and how they were resolved
    - Recommendations for verification (e.g., test queries, curl)

publish_deployment_urls:
  agent: url_publisher
  description: >
    Expose the locally running services via public URLs and confirm they are reachable.
  expected_output: >
    - Tool used for exposure (e.g., ngrok)
    - Final URLs for each service (UI, API, Admin if applicable)
    - Confirmation of reachability (ping/curl or status code)
    - Security/auth notes (if any)

integration_user_profile_stack:
  agent: integration_engineer
  description: >
    Integrate the user profile UI, backend API, and database schema into a functional end-to-end experience.
    Validate that data flows correctly from the frontend to backend and is stored in the database.
    Identify and resolve any mismatches, runtime errors, or missing glue logic across components.
  expected_output: >
    - End-to-end test scenario executed (e.g., user profile form submission, DB write)
    - Summary of integration points and how they were wired
    - Issues encountered (e.g., CORS, schema mismatch, missing fields)
    - Fixes or configuration added
    - Confirmation of successful flow (e.g., user creation verified in DB)
    - Assumptions or edge cases for future improvement

validate_system_functionality:
  agent: qa
  description: >
    Perform QA validation on the deployed and integrated MVP system.
    Run smoke tests, verify user flows, confirm service availability, and identify any issues across components.
  expected_output: >
    - Test coverage summary
    - Validation steps performed (manual + automated)
    - Issues encountered (functional, visual, integration)
    - Suggested fixes (assignable to agents)
    - Confirmation of working MVP (or fail reason)